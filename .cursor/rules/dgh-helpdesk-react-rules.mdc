---
description: 
globs: 
alwaysApply: true
---
# DGH HelpDesk - React Development Rules for Cursor AI

## Project Context
You are developing the DGH HelpDesk frontend using React, transitioning from Angular. This is a comprehensive IT helpdesk management system for the Moroccan Ministry of Equipment and Water (وزارة التجهيز والماء).

### Technology Stack
- **Frontend**: React 18 + Javascript
- **Backend**: Java 17 + Spring Boot 3.5.3 (running on port 8080)
- **UI Library**: Material-UI (MUI) v5 - PURE Material Design only
- **State Management**: React Context + useReducer (no external state libraries)
- **HTTP Client**: Axios
- **Routing**: React Router v6
- **Build Tool**: Vite
- **Styling**: NO Tailwind, NO custom CSS - MUI components and sx prop only

## Architecture Principles

### 1. Project Structure
Follow this exact folder structure:
```
src/
├── components/           # Reusable UI components
│   ├── common/          # Generic components (Layout, Loading, etc.)
│   └── forms/           # Form components
├── features/            # Feature-based modules
│   ├── auth/           # Authentication
│   ├── dashboard/      # Statistics and overview
│   ├── tickets/        # Ticket management
│   ├── users/          # User management
│   └── equipment/      # Equipment inventory
├── hooks/              # Custom React hooks
├── services/           # API services and utilities
├── types/              # TypeScript type definitions
├── contexts/           # React Context providers
├── utils/              # Utility functions
└── constants/          # App constants and enums
```

### 2. Component Architecture
- Use functional components with hooks ONLY
- Each feature should be self-contained with its own components, hooks, and types
- Implement proper TypeScript interfaces for all data structures
- Use React.memo for performance optimization where needed

### 3. State Management Strategy
- Use React Context for global state (auth, user data)
- Use useReducer for complex state logic
- Keep local state with useState for simple component state
- NO Redux, Zustand, or other external state libraries

## UI/UX Guidelines

### 1. Material Design Implementation
- Use ONLY Material-UI (MUI) components
- Follow Material Design 3 principles
- Use MUI's sx prop for all styling - NO separate CSS files
- Implement proper theming with MUI's theme provider
- Colors: Use MUI's default palette with custom DGH branding colors

### 2. Government Branding
- Primary color: Use a professional blue (#1976d2 or similar)
- Include DGH logo in header (assets/images/dgh-logo.svg)
- Maintain professional, government-appropriate styling
- Use Arabic/French language support where needed

### 3. Responsive Design
- Mobile-first approach using MUI's responsive breakpoints
- Proper drawer/sidebar for mobile navigation
- Responsive data tables with proper overflow handling

## API Integration

### 1. Backend Integration
- Backend runs on http://localhost:8080
- All API endpoints start with `/api/`
- Implement proper error handling for all HTTP requests
- Use Axios interceptors for auth tokens and global error handling

### 2. Authentication Flow
- LDAP authentication with username/password
- JWT token storage in memory (NO localStorage for security)
- Implement proper token refresh mechanism
- Role-based access control (ADMIN, TECHNICIAN, USER)

### 3. Key API Endpoints
```typescript
// Authentication
POST /api/auth/login
POST /api/auth/logout

// Users
GET /api/users
POST /api/users
PUT /api/users/{id}
DELETE /api/users/{id}

// Tickets
GET /api/tickets
POST /api/tickets
PUT /api/tickets/{id}
PUT /api/tickets/{id}/assign
PUT /api/tickets/{id}/status

// Dashboard
GET /api/dashboard/statistics
GET /api/dashboard/users/statistics
GET /api/dashboard/tickets/statistics
```

## Feature Implementation Guidelines

### 1. Authentication Module
- Login form with LDAP username/password
- Role-based route protection
- Automatic token refresh
- Proper logout handling

### 2. Dashboard Module
- Admin statistics overview
- Charts using MUI + recharts library
- Real-time data updates
- Quick action buttons

### 3. User Management
- Data table with sorting, filtering, pagination
- Create/Edit user dialogs
- Role assignment interface
- LDAP synchronization status

### 4. Ticket Management (HIGH PRIORITY)
- Ticket list with advanced filtering
- Create/Edit ticket forms
- Comment system with audit trail
- Assignment workflow
- Status change interface
- Priority and category management

### 5. Equipment Management
- Equipment inventory table
- Network discovery integration
- Equipment details forms
- Asset tracking

## Development Standards

### 1. TypeScript Usage
- Strict TypeScript configuration
- Define interfaces for all API responses
- Use proper typing for MUI components
- No `any` types - use proper type definitions

### 2. Code Organization
- One component per file
- Export components as default
- Use named exports for utilities and types
- Implement proper error boundaries

### 3. Performance Guidelines
- Use React.memo for expensive components
- Implement proper loading states
- Use React.Suspense for code splitting
- Optimize re-renders with useMemo and useCallback

### 4. Error Handling
- Global error boundary for uncaught errors
- Proper form validation with error messages
- API error handling with user-friendly messages
- Loading states for all async operations

## Security Requirements

### 1. Authentication Security
- Store JWT tokens in memory only
- Implement proper token expiration handling
- Use HTTPS in production
- Validate all user inputs

### 2. Route Protection
- Implement proper route guards
- Role-based access control
- Redirect unauthorized users appropriately

## Testing Strategy
- Use React Testing Library for component tests
- Mock API calls in tests
- Test user interactions and form submissions
- Implement accessibility tests

## Development Workflow

### 1. Priority Order
1. Authentication system
2. Main layout and navigation
3. Dashboard with statistics
4. User management module
5. Ticket management module (HIGH PRIORITY)
6. Equipment management
7. Advanced features and optimizations

### 2. Code Quality
- Use ESLint with strict rules
- Prettier for code formatting
- Implement proper commit messages
- Use TypeScript strict mode

### 3. Git Workflow
- Feature branch development
- Proper commit messages with feature context
- Code review before merging

## Environment Configuration
```typescript
// Development
API_BASE_URL=http://localhost:8080
NODE_ENV=development

// Production
API_BASE_URL=https://api.dgh.gov.ma
NODE_ENV=production
```

## Important Notes
- NO Tailwind CSS - Use MUI sx prop only
- NO custom CSS files - All styling through MUI
- Maintain the same functionality as the original Angular version
- Focus on government-appropriate professional design
- Implement proper Arabic/French language support
- The backend is 95% complete - focus on frontend implementation

## Common Patterns to Follow

### Component Structure
```typescript
interface Props {
  // Define prop types
}

const ComponentName: React.FC<Props> = ({ prop1, prop2 }) => {
  // Hooks
  // Event handlers
  // Render logic
  
  return (
    <Box sx={{ /* styling */ }}>
      {/* MUI components only */}
    </Box>
  );
};

export default React.memo(ComponentName);
```

### API Service Pattern
```typescript
export const userService = {
  getUsers: async (params?: UserListParams): Promise<User[]> => {
    const response = await apiClient.get('/users', { params });
    return response.data;
  },
  // Other methods...
};
```

Remember: You're building a professional government application. Focus on functionality, security, and user experience over fancy animations or complex UI patterns.